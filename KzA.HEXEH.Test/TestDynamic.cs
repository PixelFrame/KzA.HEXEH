using KzA.HEXEH.Base.Parser;
using KzA.HEXEH.Core.Parser;
using Xunit.Abstractions;

namespace KzA.HEXEH.Test
{
    public class TestDynamic(ITestOutputHelper output) : TestBase(output)
    {
        [Fact]
        public void TestEnum()
        {
            /*foreach (var parser in ParserManager.AvailableParsers)
            {
                Output.WriteLine($"{parser.Name} | {parser.FullName}");
            }*/
            foreach (var parserGroup in ParserManager.AvailableParsers.GroupBy(t => t.Namespace))
            {
                Output.WriteLine(parserGroup.Key);
                foreach (var parser in parserGroup)
                {
                    Output.WriteLine($"    {parser.Name}");
                }
            }
        }

        [Fact]
        public void TestDnsCountName()
        {
            var data = new byte[] { 0x11, 0x03, 0x03, 0x61, 0x62, 0x63, 0x07, 0x63, 0x6F, 0x6E, 0x74, 0x6F, 0x73, 0x6F, 0x03, 0x63, 0x6F, 0x6D, 0x00 };
            var parser = ParserManager.InstantiateParserByBaseName("DnsCountName");
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }

        [Fact]
        public void TestDnsRecordDsAttribute_A()
        {
            var data = new byte[] { 0x04, 0x00, 0x01, 0x00, 0x05, 0xF0, 0x00, 0x00, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x93, 0x38, 0x00, 0x0A, 0x02, 0x0A, 0x0D };
            var parser = ParserManager.InstantiateParserByBaseName("DnsRecordDsAttribute");
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }

        [Fact]
        public void TestDnsRecordDsAttribute_AAAA()
        {
            var data = PrepareData(@"10 00 1C 00 05 F0 00 00 80 01 00 00 00 00 04 B0 00 00 00 00 C7 94 38 00 FD 99 E4 18 5F 79 00 02 05 16 7D FF 33 8E 82 DA");
            var parser = ParserManager.InstantiateParserByBaseName("DnsRecordDsAttribute");
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }

        [Fact]
        public void TestDnsRecordDsAttribute_SRV()
        {
            var data = PrepareData(@"1E 00 21 00 05 F0 00 00 45 00 00 00 00 00 02 58 00 00 00 00 E2 91 38 00 00 00 00 64 01 85 16 04 04 76 70 64 63 04 63 6F 72 70 06 77 79 76 65 72 6E 03 6F 72 67 00");
            var parser = ParserManager.InstantiateParserByBaseName("DnsRecordDsAttribute");
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }

        [Fact]
        public void TestDnsRecordDsAttribute_MX()
        {
            var data = PrepareData(@"1C 00 0F 00 05 F0 00 00 B4 01 00 00 00 00 0E 10 00 00 00 00 00 00 00 00 00 0A 18 04 06 56 41 50 50 45 58 04 63 6F 72 70 06 77 79 76 65 72 6E 03 6F 72 67 00");
            var parser = ParserManager.InstantiateParserByBaseName("DnsRecordDsAttribute");
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }

        [Fact]
        public void TestDnsRecordDsAttribute_CNAME()
        {
            var data = new byte[] { 0x19, 0x00, 0x05, 0x00, 0x05, 0xF0, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x04, 0x05, 0x56, 0x41, 0x50, 0x50, 0x31, 0x04, 0x63, 0x6F, 0x72, 0x70, 0x06, 0x77, 0x79, 0x76, 0x65, 0x72, 0x6E, 0x03, 0x6F, 0x72, 0x67, 0x00 };
            var parser = ParserManager.InstantiateParserByBaseName("DnsRecordDsAttribute");
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }

        [Fact]
        public void TestDnsRecordDsAttribute_SOA()
        {
            var data = new byte[] { 0x4A, 0x00, 0x06, 0x00, 0x05, 0xF0, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9F, 0x00, 0x00, 0x03, 0x84, 0x00, 0x00, 0x02, 0x58, 0x00, 0x01, 0x51, 0x80, 0x00, 0x00, 0x0E, 0x10, 0x16, 0x04, 0x04, 0x76, 0x64, 0x63, 0x31, 0x04, 0x63, 0x6F, 0x72, 0x70, 0x06, 0x77, 0x79, 0x76, 0x65, 0x72, 0x6E, 0x03, 0x6F, 0x72, 0x67, 0x00, 0x1C, 0x04, 0x0A, 0x68, 0x6F, 0x73, 0x74, 0x6D, 0x61, 0x73, 0x74, 0x65, 0x72, 0x04, 0x63, 0x6F, 0x72, 0x70, 0x06, 0x77, 0x79, 0x76, 0x65, 0x72, 0x6E, 0x03, 0x6F, 0x72, 0x67, 0x00 };
            var parser = ParserManager.InstantiateParserByRelativeName("Windows.DNS.DnsRecordDsAttribute", true);
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }

        [Fact]
        public void TestDnsRecordDsAttribute_TXT()
        {
            var data = new byte[] { 0x40, 0x00, 0x10, 0x00, 0x05, 0xF0, 0x00, 0x00, 0x27, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x4C, 0x61, 0x73, 0x74, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6F, 0x6E, 0x20, 0x32, 0x30, 0x32, 0x33, 0x2E, 0x31, 0x32, 0x2E, 0x32, 0x33, 0x2E, 0x23, 0xE6, 0x9C, 0x80, 0xE5, 0x90, 0x8E, 0xE6, 0x9B, 0xB4, 0xE6, 0x96, 0xB0, 0xE4, 0xBA, 0x8E, 0x32, 0x30, 0x32, 0x33, 0xE5, 0xB9, 0xB4, 0x31, 0x32, 0xE6, 0x9C, 0x88, 0x32, 0x33, 0xE6, 0x97, 0xA5, 0xE3, 0x80, 0x82 };
            var parser = ParserManager.InstantiateParserByRelativeName("Windows.DNS.DnsRecordDsAttribute", true);
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }

        [Fact]
        public void TestDnsRecordDsAttribute_Unknown()
        {
            var data = new byte[] { 0x40, 0x00, 0xff, 0x00, 0x05, 0xF0, 0x00, 0x00, 0x27, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x4C, 0x61, 0x73, 0x74, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6F, 0x6E, 0x20, 0x32, 0x30, 0x32, 0x33, 0x2E, 0x31, 0x32, 0x2E, 0x32, 0x33, 0x2E, 0x23, 0xE6, 0x9C, 0x80, 0xE5, 0x90, 0x8E, 0xE6, 0x9B, 0xB4, 0xE6, 0x96, 0xB0, 0xE4, 0xBA, 0x8E, 0x32, 0x30, 0x32, 0x33, 0xE5, 0xB9, 0xB4, 0x31, 0x32, 0xE6, 0x9C, 0x88, 0x32, 0x33, 0xE6, 0x97, 0xA5, 0xE3, 0x80, 0x82 };
            var parser = ParserManager.InstantiateParserByRelativeName("Windows.DNS.DnsRecordDsAttribute", true);
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }


        [Fact]
        public void TestDhcpOption6()
        {
            var data = new byte[] { 0x06, 0x04, 0x0a, 0x01, 0x01, 0x01 };
            var parser = ParserManager.InstantiateParserByRelativeName("Networking.DHCP.DhcpOption", true);
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }

        [Fact]
        public void TestDhcpList()
        {
            var data = PrepareData("3501053a0400000e103b040000189c330400001c2036040a0102010104ffff0000510303ff0003040a0100fe06080a0101010a0201010f12636f72702e73796d70686f6e792e6f726700771504636f72700873796d70686f6e79036f726700c005fc28687474703a2f2f777061642e636f72702e73796d70686f6e792e6f72672f70726f78792e70616300ff");
            var parser = ParserManager.InstantiateParserByRelativeName("Networking.DHCP.DhcpOptionList", true);
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }

        [Fact]
        public void TestDfsnPkt()
        {
            var data = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x00, 0x5C, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x46, 0x01, 0x00, 0x00, 0xAD, 0x8C, 0xEE, 0x75, 0x7F, 0x00, 0xC7, 0x41, 0xB9, 0xAA, 0xC4, 0x1E, 0xE8, 0x54, 0x90, 0x78, 0x2E, 0x00, 0x5C, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x70, 0x00, 0x2E, 0x00, 0x77, 0x00, 0x79, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x2E, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x67, 0x00, 0x5C, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x61, 0x00, 0x63, 0x00, 0x79, 0x00, 0x2E, 0x00, 0x5C, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x70, 0x00, 0x2E, 0x00, 0x77, 0x00, 0x79, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x2E, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x67, 0x00, 0x5C, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x61, 0x00, 0x63, 0x00, 0x79, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xBA, 0x2D, 0x4D, 0x07, 0x38, 0xDA, 0x01, 0xA0, 0xBA, 0x2D, 0x4D, 0x07, 0x38, 0xDA, 0x01, 0xA0, 0xBA, 0x2D, 0x4D, 0x07, 0x38, 0xDA, 0x01, 0x03, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x28, 0x00, 0x56, 0x00, 0x50, 0x00, 0x44, 0x00, 0x43, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x70, 0x00, 0x2E, 0x00, 0x77, 0x00, 0x79, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x2E, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x67, 0x00, 0x0C, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x61, 0x00, 0x63, 0x00, 0x79, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x28, 0x00, 0x56, 0x00, 0x44, 0x00, 0x43, 0x00, 0x31, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x70, 0x00, 0x2E, 0x00, 0x77, 0x00, 0x79, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x2E, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x67, 0x00, 0x0C, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x61, 0x00, 0x63, 0x00, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x60, 0x00, 0x5C, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x66, 0x00, 0x38, 0x00, 0x36, 0x00, 0x63, 0x00, 0x66, 0x00, 0x61, 0x00, 0x32, 0x00, 0x34, 0x00, 0x2D, 0x00, 0x36, 0x00, 0x39, 0x00, 0x62, 0x00, 0x63, 0x00, 0x2D, 0x00, 0x34, 0x00, 0x35, 0x00, 0x34, 0x00, 0x33, 0x00, 0x2D, 0x00, 0x61, 0x00, 0x34, 0x00, 0x39, 0x00, 0x61, 0x00, 0x2D, 0x00, 0x61, 0x00, 0x31, 0x00, 0x64, 0x00, 0x33, 0x00, 0x62, 0x00, 0x32, 0x00, 0x30, 0x00, 0x37, 0x00, 0x34, 0x00, 0x66, 0x00, 0x61, 0x00, 0x32, 0x00, 0x06, 0x01, 0x00, 0x00, 0x24, 0xFA, 0x6C, 0xF8, 0xBC, 0x69, 0x43, 0x45, 0xA4, 0x9A, 0xA1, 0xD3, 0xB2, 0x07, 0x4F, 0xA2, 0x42, 0x00, 0x5C, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x70, 0x00, 0x2E, 0x00, 0x77, 0x00, 0x79, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x2E, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x67, 0x00, 0x5C, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x61, 0x00, 0x63, 0x00, 0x79, 0x00, 0x5C, 0x00, 0x41, 0x00, 0x50, 0x00, 0x50, 0x00, 0x32, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x42, 0x00, 0x5C, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x70, 0x00, 0x2E, 0x00, 0x77, 0x00, 0x79, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x2E, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x67, 0x00, 0x5C, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x61, 0x00, 0x63, 0x00, 0x79, 0x00, 0x5C, 0x00, 0x41, 0x00, 0x50, 0x00, 0x50, 0x00, 0x32, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xB4, 0x8F, 0x3F, 0x07, 0x38, 0xDA, 0x01, 0xC0, 0xB4, 0x8F, 0x3F, 0x07, 0x38, 0xDA, 0x01, 0xC0, 0xB4, 0x8F, 0x3F, 0x07, 0x38, 0xDA, 0x01, 0x03, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x56, 0x00, 0x41, 0x00, 0x50, 0x00, 0x50, 0x00, 0x32, 0x00, 0x0E, 0x00, 0x43, 0x00, 0x24, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00, 0x60, 0x00, 0x5C, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x37, 0x00, 0x34, 0x00, 0x61, 0x00, 0x36, 0x00, 0x32, 0x00, 0x31, 0x00, 0x30, 0x00, 0x35, 0x00, 0x2D, 0x00, 0x36, 0x00, 0x66, 0x00, 0x36, 0x00, 0x61, 0x00, 0x2D, 0x00, 0x34, 0x00, 0x33, 0x00, 0x39, 0x00, 0x33, 0x00, 0x2D, 0x00, 0x61, 0x00, 0x36, 0x00, 0x63, 0x00, 0x65, 0x00, 0x2D, 0x00, 0x35, 0x00, 0x31, 0x00, 0x35, 0x00, 0x63, 0x00, 0x39, 0x00, 0x66, 0x00, 0x35, 0x00, 0x34, 0x00, 0x39, 0x00, 0x32, 0x00, 0x30, 0x00, 0x61, 0x00, 0x14, 0x01, 0x00, 0x00, 0x05, 0x21, 0xA6, 0x74, 0x6A, 0x6F, 0x93, 0x43, 0xA6, 0xCE, 0x51, 0x5C, 0x9F, 0x54, 0x92, 0x0A, 0x36, 0x00, 0x5C, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x70, 0x00, 0x2E, 0x00, 0x77, 0x00, 0x79, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x2E, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x67, 0x00, 0x5C, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x61, 0x00, 0x63, 0x00, 0x79, 0x00, 0x5C, 0x00, 0x43, 0x00, 0x52, 0x00, 0x4C, 0x00, 0x36, 0x00, 0x5C, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x70, 0x00, 0x2E, 0x00, 0x77, 0x00, 0x79, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x2E, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x67, 0x00, 0x5C, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x61, 0x00, 0x63, 0x00, 0x79, 0x00, 0x5C, 0x00, 0x43, 0x00, 0x52, 0x00, 0x4C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x9F, 0x46, 0x26, 0x07, 0x38, 0xDA, 0x01, 0x60, 0x9F, 0x46, 0x26, 0x07, 0x38, 0xDA, 0x01, 0x60, 0x9F, 0x46, 0x26, 0x07, 0x38, 0xDA, 0x01, 0x03, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x56, 0x00, 0x41, 0x00, 0x50, 0x00, 0x50, 0x00, 0x31, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x70, 0x00, 0x2E, 0x00, 0x77, 0x00, 0x79, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x2E, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x67, 0x00, 0x14, 0x00, 0x63, 0x00, 0x72, 0x00, 0x6C, 0x00, 0x70, 0x00, 0x75, 0x00, 0x62, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x73, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x07, 0x00, 0x00, 0x12, 0x00, 0x5C, 0x00, 0x73, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x14, 0x00, 0x00, 0x00, 0x03, 0x83, 0x57, 0xA9, 0x50, 0x01, 0xC1, 0x48, 0x81, 0x26, 0xE2, 0x9B, 0x85, 0x34, 0xB1, 0xDF, 0x00, 0x00, 0x00, 0x00 };
            var parser = ParserManager.InstantiateParserByRelativeName("Windows.DFSN.PKT", true);
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }

        [Fact]
        public void TestProxyConfig()
        {
            var data = new byte[] { 0x46, 0x00, 0x00, 0x00, 0xC4, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x31, 0x32, 0x37, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x31, 0x3A, 0x31, 0x30, 0x38, 0x30, 0x39, 0xAE, 0x00, 0x00, 0x00, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x68, 0x6F, 0x73, 0x74, 0x3B, 0x31, 0x32, 0x37, 0x2E, 0x2A, 0x3B, 0x31, 0x30, 0x2E, 0x2A, 0x3B, 0x31, 0x37, 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x2A, 0x3B, 0x31, 0x37, 0x32, 0x2E, 0x31, 0x37, 0x2E, 0x2A, 0x3B, 0x31, 0x37, 0x32, 0x2E, 0x31, 0x38, 0x2E, 0x2A, 0x3B, 0x31, 0x37, 0x32, 0x2E, 0x31, 0x39, 0x2E, 0x2A, 0x3B, 0x31, 0x37, 0x32, 0x2E, 0x32, 0x30, 0x2E, 0x2A, 0x3B, 0x31, 0x37, 0x32, 0x2E, 0x32, 0x31, 0x2E, 0x2A, 0x3B, 0x31, 0x37, 0x32, 0x2E, 0x32, 0x32, 0x2E, 0x2A, 0x3B, 0x31, 0x37, 0x32, 0x2E, 0x32, 0x33, 0x2E, 0x2A, 0x3B, 0x31, 0x37, 0x32, 0x2E, 0x32, 0x34, 0x2E, 0x2A, 0x3B, 0x31, 0x37, 0x32, 0x2E, 0x32, 0x35, 0x2E, 0x2A, 0x3B, 0x31, 0x37, 0x32, 0x2E, 0x32, 0x36, 0x2E, 0x2A, 0x3B, 0x31, 0x37, 0x32, 0x2E, 0x32, 0x37, 0x2E, 0x2A, 0x3B, 0x31, 0x37, 0x32, 0x2E, 0x32, 0x38, 0x2E, 0x2A, 0x3B, 0x31, 0x37, 0x32, 0x2E, 0x32, 0x39, 0x2E, 0x2A, 0x3B, 0x31, 0x37, 0x32, 0x2E, 0x33, 0x30, 0x2E, 0x2A, 0x3B, 0x31, 0x37, 0x32, 0x2E, 0x33, 0x31, 0x2E, 0x2A, 0x3B, 0x31, 0x39, 0x32, 0x2E, 0x31, 0x36, 0x38, 0x2E, 0x2A, 0x2F, 0x00, 0x00, 0x00, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x31, 0x32, 0x37, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x31, 0x3A, 0x31, 0x30, 0x38, 0x31, 0x32, 0x2F, 0x70, 0x61, 0x63, 0x3F, 0x74, 0x3D, 0x36, 0x33, 0x38, 0x34, 0x30, 0x30, 0x36, 0x34, 0x30, 0x34, 0x31, 0x37, 0x33, 0x34, 0x36, 0x38, 0x36, 0x35, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            var parser = ParserManager.InstantiateParserByRelativeName("Windows.ProxyConfig", true);
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }

        [Fact]
        public void TestServiceFailureActions()
        {
            var data = PrepareData("08-07-00-00-01-00-00-00-01-00-00-00-0B-00-00-00-14-00-00-00-01-00-00-00-00-00-00-00-01-00-00-00-98-3A-00-00-01-00-00-00-98-3A-00-00-01-00-00-00-98-3A-00-00-01-00-00-00-98-3A-00-00-01-00-00-00-98-3A-00-00-01-00-00-00-98-3A-00-00-01-00-00-00-98-3A-00-00-01-00-00-00-98-3A-00-00-01-00-00-00-98-3A-00-00-00-00-00-00-00-00-00-00");
            var parser = ParserManager.InstantiateParserByRelativeName("Windows.Service.FailureActions", true);
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }
    }
}

using KzA.HEXEH.Core.Parser;
using Xunit.Abstractions;

namespace KzA.HEXEH.Test
{
    public class TestDynamic(ITestOutputHelper output) : TestBase(output)
    {
        [Fact]
        public void TestEnum()
        {
            Core.Global.Initialize();
            foreach (var parser in ParserManager.AvailableParsers)
            {
                Output.WriteLine($"{parser.Name} | {parser.FullName}");
            }
        }

        [Fact]
        public void TestDnsCountName()
        {
            var data = new byte[] { 0x11, 0x03, 0x03, 0x61, 0x62, 0x63, 0x07, 0x63, 0x6F, 0x6E, 0x74, 0x6F, 0x73, 0x6F, 0x03, 0x63, 0x6F, 0x6D, 0x00 };
            var parser = ParserManager.InstantiateParserByBaseName("DnsCountName");
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }

        [Fact]
        public void TestDnsRecordDsAttribute_A()
        {
            Core.Global.Initialize();
            var data = new byte[] { 0x04, 0x00, 0x01, 0x00, 0x05, 0xF0, 0x00, 0x00, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x93, 0x38, 0x00, 0x0A, 0x02, 0x0A, 0x0D };
            var parser = ParserManager.InstantiateParserByBaseName("DnsRecordDsAttribute");
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }

        [Fact]
        public void TestDnsRecordDsAttribute_CNAME()
        {
            Core.Global.Initialize();
            var data = new byte[] { 0x19, 0x00, 0x05, 0x00, 0x05, 0xF0, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x04, 0x05, 0x56, 0x41, 0x50, 0x50, 0x31, 0x04, 0x63, 0x6F, 0x72, 0x70, 0x06, 0x77, 0x79, 0x76, 0x65, 0x72, 0x6E, 0x03, 0x6F, 0x72, 0x67, 0x00 };
            var parser = ParserManager.InstantiateParserByBaseName("DnsRecordDsAttribute");
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }

        [Fact]
        public void TestDnsRecordDsAttribute_SOA()
        {
            Core.Global.Initialize();
            var data = new byte[] { 0x4A, 0x00, 0x06, 0x00, 0x05, 0xF0, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9F, 0x00, 0x00, 0x03, 0x84, 0x00, 0x00, 0x02, 0x58, 0x00, 0x01, 0x51, 0x80, 0x00, 0x00, 0x0E, 0x10, 0x16, 0x04, 0x04, 0x76, 0x64, 0x63, 0x31, 0x04, 0x63, 0x6F, 0x72, 0x70, 0x06, 0x77, 0x79, 0x76, 0x65, 0x72, 0x6E, 0x03, 0x6F, 0x72, 0x67, 0x00, 0x1C, 0x04, 0x0A, 0x68, 0x6F, 0x73, 0x74, 0x6D, 0x61, 0x73, 0x74, 0x65, 0x72, 0x04, 0x63, 0x6F, 0x72, 0x70, 0x06, 0x77, 0x79, 0x76, 0x65, 0x72, 0x6E, 0x03, 0x6F, 0x72, 0x67, 0x00 };
            var parser = ParserManager.InstantiateParserByRelativeName("DNS.DnsRecordDsAttribute", true);
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }

        [Fact]
        public void TestConditionParser()
        {
            Core.Global.Initialize();
            var data = new byte[] { 0x03, 0x00, 0x03, 0x61, 0x62, 0x63, 0x07, 0x63, 0x6F, 0x6E, 0x74, 0x6F, 0x73, 0x6F, 0x03, 0x63, 0x6F, 0x6D, 0x00, 0x50, 0x60, 0x70, 0x80 };
            var parser = ParserManager.InstantiateParserByRelativeName("Test.Condition", true);
            var result = parser.Parse(data);
            Output.WriteLine(result.ToStringVerbose());
        }
    }
}
